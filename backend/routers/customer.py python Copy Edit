from fastapi import APIRouter, HTTPException, Depends
from sqlalchemy.orm import Session
from typing import List

from models import Customer
from schemas import CustomerCreate, CustomerOut, CustomerWithTeaching
from main import get_db

router = APIRouter()

# ------------------ Customer Endpoints ------------------

@router.post("/customers", response_model=CustomerOut, tags=["Customer API"])
def create_customer(customer: CustomerCreate, db: Session = Depends(get_db)):
    db_customer = Customer(**customer.dict())
    db.add(db_customer)
    db.commit()
    db.refresh(db_customer)
    return db_customer

@router.get("/customers", response_model=List[CustomerOut], tags=["Customer API"])
def get_all_customers(db: Session = Depends(get_db)):
    return db.query(Customer).all()

@router.get("/customers/{customer_id}", response_model=CustomerOut, tags=["Customer API"])
def get_customer(customer_id: int, db: Session = Depends(get_db)):
    customer = db.query(Customer).filter(Customer.ID == customer_id).first()
    if not customer:
        raise HTTPException(status_code=404, detail="Customer not found")
    return customer

@router.delete("/customers/{customer_id}", tags=["Customer API"])
def delete_customer(customer_id: int, db: Session = Depends(get_db)):
    customer = db.query(Customer).filter(Customer.ID == customer_id).first()
    if not customer:
        raise HTTPException(status_code=404, detail="Customer not found")
    db.delete(customer)
    db.commit()
    return {"message": "Customer deleted successfully"}

@router.get("/customer-teaching/{customer_id}", response_model=CustomerWithTeaching, tags=["Combined API"])
def get_customer_with_teaching(customer_id: int, db: Session = Depends(get_db)):
    customer = db.query(Customer).filter(Customer.ID == customer_id).first()
    if not customer:
        raise HTTPException(status_code=404, detail="Customer not found")
    return customer
