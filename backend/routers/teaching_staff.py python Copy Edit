from fastapi import APIRouter, HTTPException, Depends
from sqlalchemy.orm import Session
from typing import List

from models import Customer, TeachingStaff
from schemas import TeachingStaffCreate, TeachingStaffOut
from main import get_db

router = APIRouter()

# ------------------ Teaching Staff Endpoints ------------------

@router.post("/teachingstaff/{customer_id}", response_model=TeachingStaffOut, tags=["Teaching Staff API"])
def create_teaching_profile(customer_id: int, profile: TeachingStaffCreate, db: Session = Depends(get_db)):
    customer = db.query(Customer).filter(Customer.ID == customer_id).first()
    if not customer:
        raise HTTPException(status_code=404, detail="Customer not found")
    if customer.teaching_info:
        raise HTTPException(status_code=400, detail="Teaching profile already exists")
    new_profile = TeachingStaff(TeachingID=customer_id, **profile.dict())
    db.add(new_profile)
    db.commit()
    db.refresh(new_profile)
    return new_profile

@router.get("/teachingstaff", response_model=List[TeachingStaffOut], tags=["Teaching Staff API"])
def get_all_teaching_profiles(db: Session = Depends(get_db)):
    return db.query(TeachingStaff).all()

@router.get("/teachingstaff/{customer_id}", response_model=TeachingStaffOut, tags=["Teaching Staff API"])
def get_teaching_profile(customer_id: int, db: Session = Depends(get_db)):
    profile = db.query(TeachingStaff).filter(TeachingStaff.TeachingID == customer_id).first()
    if not profile:
        raise HTTPException(status_code=404, detail="Teaching profile not found")
    return profile

@router.put("/teachingstaff/{customer_id}", response_model=TeachingStaffOut, tags=["Teaching Staff API"])
def update_teaching_profile(customer_id: int, data: TeachingStaffCreate, db: Session = Depends(get_db)):
    profile = db.query(TeachingStaff).filter(TeachingStaff.TeachingID == customer_id).first()
    if not profile:
        raise HTTPException(status_code=404, detail="Teaching profile not found")
    for key, value in data.dict().items():
        setattr(profile, key, value)
    db.commit()
    db.refresh(profile)
    return profile

@router.delete("/teachingstaff/{customer_id}", tags=["Teaching Staff API"])
def delete_teaching_profile(customer_id: int, db: Session = Depends(get_db)):
    profile = db.query(TeachingStaff).filter(TeachingStaff.TeachingID == customer_id).first()
    if not profile:
        raise HTTPException(status_code=404, detail="Teaching profile not found")
    db.delete(profile)
    db.commit()
    return {"message": "Teaching profile deleted successfully"}
